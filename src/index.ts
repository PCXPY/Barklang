/**
 * @overview generated by ghoti-cli
 * @fileoverview Entry
 */

import generateAst from "./ast/ast";
import excute from "./excute/excute";
import { internalList, internals } from "./excute/list";

import TAst from "./types/ast";
import IBkcOptions, { TCallables } from "./types/callable";
import TExcute from "./types/excute";
import { fixOption } from "./util/check";

const findExternal = (val: string, externals: TCallables): number => {
    for (let i: number = 0; i < externals.length; i++) {
        if (externals[i].command === val) {
            return i;
        }
    }
    return -1;
};

const determinReturn = (command: string): boolean => {
    if (command === 'return') {
        return true;
    }
    return false;
};

const determin = (command: string, externals: TCallables): ((arg: any) => void) | null => {
    const internalIndex: number = internalList.indexOf(command);
    const externalIndex: number = findExternal(command, externals);

    if (internalIndex !== -1) {
        return internals[internalIndex].func;
    }

    if (externalIndex !== -1) {
        return externals[externalIndex].func;
    }

    return null;
};

export const bkc = (code: string, optionsE?: IBkcOptions): any => {
    const options: IBkcOptions = fixOption(optionsE);

    const ast: TAst = generateAst(code, options);
    const excuted: TExcute = excute(ast, options.vars);

    for (let i of excuted) {
        if (determinReturn(i.value)) {
            return i.arg;
        }
        const func: ((arg: any) => void) | null = determin(i.value, (options.externals as TCallables));

        if (!func) {
            throw new Error('command is not defined exception');
        }

        func(i.arg);
    }

    return void 0;
};

export default bkc;
